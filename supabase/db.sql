
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE FUNCTION "public"."create_user_and_contact"("name" "text", "email" "text", "password" "text", "user_id" "uuid") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- Iniciamos una transacción implícita al insertar en las tablas
  BEGIN
    -- Insertamos en la tabla profiles
    INSERT INTO users (id, name, role, email)
    VALUES (user_id, name, 'user', email);

    -- Insertamos en la tabla contacts
    INSERT INTO contacts (user_id, name, url, username, icon)
    VALUES (user_id, 'Email', 'mailto:' || email, email, 'mailOpenOutline');

    -- Si todo fue exitoso, la transacción se confirma automáticamente
  EXCEPTION
    -- Si algo falla, se realizará rollback automáticamente
    WHEN others THEN
      RAISE EXCEPTION 'Error al crear el perfil y el contacto. Detalles: %', SQLERRM;
  END;
END;
$$;

ALTER FUNCTION "public"."create_user_and_contact"("name" "text", "email" "text", "password" "text", "user_id" "uuid") OWNER TO "postgres";

CREATE FUNCTION "public"."is_admin"() RETURNS boolean
    LANGUAGE "plpgsql"
    AS $$BEGIN
return (
  select exists(
    select 1 from users where id=auth.uid()
    and role='admin'
  )
);
END$$;

ALTER FUNCTION "public"."is_admin"() OWNER TO "postgres";

CREATE FUNCTION "public"."is_client"() RETURNS boolean
    LANGUAGE "plpgsql"
    AS $$BEGIN
return (
  select exists(
    select 1 from users where id=auth.uid()
    and role='client' OR role='admin'
  )
);
END$$;

ALTER FUNCTION "public"."is_client"() OWNER TO "postgres";

CREATE FUNCTION "public"."is_trainer"() RETURNS boolean
    LANGUAGE "plpgsql"
    AS $$BEGIN
return (
  select exists(
    select 1 from users where id=auth.uid()
    and role='trainer' OR role='admin'
  )
);
END$$;

ALTER FUNCTION "public"."is_trainer"() OWNER TO "postgres";

CREATE FUNCTION "public"."is_user"() RETURNS boolean
    LANGUAGE "plpgsql"
    AS $$BEGIN
return (
  select exists(
    select 1 from users where id=auth.uid()
    and role='user' OR role='admin'
  )
);
END$$;

ALTER FUNCTION "public"."is_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE "public"."contacts" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "name" "text" NOT NULL,
    "icon" "text" NOT NULL,
    "url" "text" NOT NULL,
    "username" "text" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."contacts" OWNER TO "postgres";

ALTER TABLE "public"."contacts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."contacts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."dietfoods" (
    "id" bigint NOT NULL,
    "cant" double precision NOT NULL,
    "food_id" bigint NOT NULL,
    "diet_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."dietfoods" OWNER TO "postgres";

ALTER TABLE "public"."dietfoods" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dieetfoods_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."diets" (
    "id" bigint NOT NULL,
    "type" "text" NOT NULL,
    "goal" "text" NOT NULL,
    "proteins" double precision NOT NULL,
    "calories" double precision NOT NULL,
    "trainer_id" "uuid" NOT NULL,
    "user_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."diets" OWNER TO "postgres";

ALTER TABLE "public"."diets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."diets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."evalphotos" (
    "id" bigint NOT NULL,
    "eval_id" bigint,
    "path" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "deleted_at" timestamp with time zone
);

ALTER TABLE "public"."evalphotos" OWNER TO "postgres";

ALTER TABLE "public"."evalphotos" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."evalphotos_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."evals" (
    "id" bigint NOT NULL,
    "observation" "text",
    "date" "date" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL,
    "trainer_id" "uuid"
);

ALTER TABLE "public"."evals" OWNER TO "postgres";

ALTER TABLE "public"."evals" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."evals_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."foods" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "group" "text" NOT NULL,
    "proteins" double precision NOT NULL,
    "calories" double precision NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "unit" "text" DEFAULT '100 g'::"text" NOT NULL,
    "trainer_id" "uuid" DEFAULT "auth"."uid"()
);

ALTER TABLE "public"."foods" OWNER TO "postgres";

ALTER TABLE "public"."foods" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."foods_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."measures" (
    "id" bigint NOT NULL,
    "key" "text" NOT NULL,
    "name" "text" NOT NULL,
    "value" double precision NOT NULL,
    "eval_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."measures" OWNER TO "postgres";

ALTER TABLE "public"."measures" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."measures_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."routines" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "description" "text" NOT NULL,
    "duration" "text",
    "goal" "text",
    "range" "text",
    "advantages" "text",
    "body" "text",
    "image" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "trainer_id" "uuid" DEFAULT "auth"."uid"(),
    "status" "text" DEFAULT 'Public'::"text"
);

ALTER TABLE "public"."routines" OWNER TO "postgres";

ALTER TABLE "public"."routines" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."routines_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."users" (
    "name" "text" NOT NULL,
    "address" "text",
    "start_date" "date",
    "price" double precision DEFAULT '0'::double precision,
    "height" double precision,
    "birthdate" "date",
    "photo" "text",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "deleted_at" timestamp with time zone,
    "role" "text" DEFAULT 'user'::"text" NOT NULL,
    "trainer_id" "uuid",
    "email" "text" NOT NULL,
    "id" "uuid" NOT NULL
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE ONLY "public"."contacts"
    ADD CONSTRAINT "contacts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."dietfoods"
    ADD CONSTRAINT "dieetfoods_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."diets"
    ADD CONSTRAINT "diets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."evalphotos"
    ADD CONSTRAINT "evalphotos_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."evals"
    ADD CONSTRAINT "evals_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."foods"
    ADD CONSTRAINT "foods_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."measures"
    ADD CONSTRAINT "measures_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."routines"
    ADD CONSTRAINT "routines_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."contacts"
    ADD CONSTRAINT "contacts_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."dietfoods"
    ADD CONSTRAINT "dietfoods_diet_id_fkey" FOREIGN KEY ("diet_id") REFERENCES "public"."diets"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."dietfoods"
    ADD CONSTRAINT "dietfoods_food_id_fkey" FOREIGN KEY ("food_id") REFERENCES "public"."foods"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."diets"
    ADD CONSTRAINT "diets_trainer_id_fkey" FOREIGN KEY ("trainer_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."diets"
    ADD CONSTRAINT "diets_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."evalphotos"
    ADD CONSTRAINT "evalphotos_eval_id_fkey" FOREIGN KEY ("eval_id") REFERENCES "public"."evals"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."evals"
    ADD CONSTRAINT "evals_trainer_id_fkey" FOREIGN KEY ("trainer_id") REFERENCES "auth"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."evals"
    ADD CONSTRAINT "evals_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."foods"
    ADD CONSTRAINT "foods_trainer_id_fkey" FOREIGN KEY ("trainer_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."measures"
    ADD CONSTRAINT "measures_eval_id_fkey" FOREIGN KEY ("eval_id") REFERENCES "public"."evals"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."routines"
    ADD CONSTRAINT "routines_trainer_id_fkey" FOREIGN KEY ("trainer_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_trainer_id_fkey" FOREIGN KEY ("trainer_id") REFERENCES "auth"."users"("id");

CREATE POLICY "Admin can delete evalphoto" ON "public"."evalphotos" FOR DELETE TO "authenticated" USING ("public"."is_admin"());

CREATE POLICY "Admin can delete food" ON "public"."foods" FOR DELETE TO "authenticated" USING ("public"."is_admin"());

CREATE POLICY "Admin can insert eval" ON "public"."evals" FOR INSERT TO "authenticated" WITH CHECK (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"()))));

CREATE POLICY "Admin can insert food" ON "public"."foods" FOR INSERT TO "authenticated" WITH CHECK (("public"."is_admin"() OR "public"."is_trainer"()));

CREATE POLICY "Admin can insert routine" ON "public"."routines" FOR INSERT TO "authenticated" WITH CHECK (("public"."is_admin"() OR "public"."is_trainer"()));

CREATE POLICY "Admin can update food" ON "public"."foods" FOR UPDATE TO "authenticated" USING ("public"."is_admin"());

CREATE POLICY "Admin or Trainer Prop can delete routine" ON "public"."routines" FOR DELETE TO "authenticated" USING (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"()))));

CREATE POLICY "Admin or Trainer Proper can edit routine" ON "public"."routines" FOR UPDATE TO "authenticated" USING (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"()))));

CREATE POLICY "Admin or Trainer can delete eval" ON "public"."evals" FOR DELETE TO "authenticated" USING (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"()))));

CREATE POLICY "Admin or Trainer can delete measure" ON "public"."measures" FOR DELETE TO "authenticated" USING (("public"."is_admin"() OR "public"."is_trainer"()));

CREATE POLICY "Admin or Trainer can edit eval" ON "public"."evals" FOR UPDATE TO "authenticated" USING (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"()))));

CREATE POLICY "Admin or Trainer or Client can insert diet" ON "public"."diets" FOR INSERT TO "authenticated" WITH CHECK (("public"."is_trainer"() OR ("public"."is_client"() AND (( SELECT "users"."trainer_id"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())
 LIMIT 1) <> NULL::"uuid"))));

CREATE POLICY "Admin or Trainer proper can delete diet" ON "public"."diets" FOR DELETE TO "authenticated" USING ((("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"())) OR "public"."is_admin"()));

CREATE POLICY "Admin or proper can edit contact" ON "public"."contacts" FOR UPDATE TO "authenticated" USING (("user_id" = "auth"."uid"()));

CREATE POLICY "Admin or proper can read diet" ON "public"."diets" FOR SELECT TO "authenticated" USING ((("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"())) OR (("public"."is_client"() AND ("user_id" = "auth"."uid"())) OR ((NOT "public"."is_user"()) AND ("user_id" = NULL::"uuid"))) OR "public"."is_admin"()));

CREATE POLICY "Admin or trainer proper can edit diet" ON "public"."diets" FOR UPDATE TO "authenticated" USING (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"()))));

CREATE POLICY "Admin, trainer or proper can read eval" ON "public"."evals" FOR SELECT TO "authenticated" USING (("public"."is_admin"() OR ("public"."is_trainer"() AND ("trainer_id" = "auth"."uid"())) OR ("user_id" = "auth"."uid"())));

CREATE POLICY "Anyone can't edit evalphotos" ON "public"."evalphotos" FOR UPDATE USING (false);

CREATE POLICY "Auth can read contact" ON "public"."contacts" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Auth can read evalphotos" ON "public"."evalphotos" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Auth can read foods" ON "public"."foods" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Auth can read measures" ON "public"."measures" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Auth cand read dietfood" ON "public"."dietfoods" FOR SELECT TO "authenticated" USING ((NOT "public"."is_user"()));

CREATE POLICY "Auth or Trainer can delete dietfood" ON "public"."dietfoods" FOR DELETE TO "authenticated" USING ("public"."is_trainer"());

CREATE POLICY "Auth or Trainer cand edit dietfood" ON "public"."dietfoods" FOR UPDATE TO "authenticated" USING ("public"."is_trainer"());

CREATE POLICY "Auth or Trainer or Client can insert dietfood" ON "public"."dietfoods" FOR INSERT TO "authenticated" WITH CHECK (("public"."is_trainer"() OR ("public"."is_client"() AND (( SELECT "users"."trainer_id"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())
 LIMIT 1) <> NULL::"uuid"))));

CREATE POLICY "Auth or suscribed can read routines" ON "public"."routines" FOR SELECT TO "authenticated" USING (((NOT "public"."is_user"()) OR ("trainer_id" IN ( SELECT "users"."trainer_id"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())))));

CREATE POLICY "Auth proper can insert contact" ON "public"."contacts" FOR INSERT WITH CHECK (true);

CREATE POLICY "No one  can't delete contact" ON "public"."contacts" FOR DELETE USING (false);

CREATE POLICY "Restrict read users" ON "public"."users" FOR SELECT TO "authenticated" USING ((("id" = "auth"."uid"()) OR ("trainer_id" = "auth"."uid"()) OR "public"."is_admin"()));

CREATE POLICY "User can't edit measure" ON "public"."measures" FOR UPDATE TO "authenticated" USING ((NOT "public"."is_user"()));

CREATE POLICY "User can't insert evalphotos" ON "public"."evalphotos" FOR INSERT TO "authenticated" WITH CHECK ((NOT "public"."is_user"()));

CREATE POLICY "User can't insert measure" ON "public"."measures" FOR INSERT TO "authenticated" WITH CHECK ((NOT "public"."is_user"()));

ALTER TABLE "public"."contacts" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."dietfoods" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."diets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."evalphotos" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."evals" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."foods" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."measures" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."routines" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_user_and_contact"("name" "text", "email" "text", "password" "text", "user_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."create_user_and_contact"("name" "text", "email" "text", "password" "text", "user_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_user_and_contact"("name" "text", "email" "text", "password" "text", "user_id" "uuid") TO "service_role";

GRANT ALL ON FUNCTION "public"."is_admin"() TO "anon";
GRANT ALL ON FUNCTION "public"."is_admin"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_admin"() TO "service_role";

GRANT ALL ON FUNCTION "public"."is_client"() TO "anon";
GRANT ALL ON FUNCTION "public"."is_client"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_client"() TO "service_role";

GRANT ALL ON FUNCTION "public"."is_trainer"() TO "anon";
GRANT ALL ON FUNCTION "public"."is_trainer"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_trainer"() TO "service_role";

GRANT ALL ON FUNCTION "public"."is_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."is_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_user"() TO "service_role";

GRANT ALL ON TABLE "public"."contacts" TO "anon";
GRANT ALL ON TABLE "public"."contacts" TO "authenticated";
GRANT ALL ON TABLE "public"."contacts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."contacts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."contacts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."contacts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."dietfoods" TO "anon";
GRANT ALL ON TABLE "public"."dietfoods" TO "authenticated";
GRANT ALL ON TABLE "public"."dietfoods" TO "service_role";

GRANT ALL ON SEQUENCE "public"."dieetfoods_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dieetfoods_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dieetfoods_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."diets" TO "anon";
GRANT ALL ON TABLE "public"."diets" TO "authenticated";
GRANT ALL ON TABLE "public"."diets" TO "service_role";

GRANT ALL ON SEQUENCE "public"."diets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."diets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."diets_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."evalphotos" TO "anon";
GRANT ALL ON TABLE "public"."evalphotos" TO "authenticated";
GRANT ALL ON TABLE "public"."evalphotos" TO "service_role";

GRANT ALL ON SEQUENCE "public"."evalphotos_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."evalphotos_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."evalphotos_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."evals" TO "anon";
GRANT ALL ON TABLE "public"."evals" TO "authenticated";
GRANT ALL ON TABLE "public"."evals" TO "service_role";

GRANT ALL ON SEQUENCE "public"."evals_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."evals_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."evals_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."foods" TO "anon";
GRANT ALL ON TABLE "public"."foods" TO "authenticated";
GRANT ALL ON TABLE "public"."foods" TO "service_role";

GRANT ALL ON SEQUENCE "public"."foods_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."foods_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."foods_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."measures" TO "anon";
GRANT ALL ON TABLE "public"."measures" TO "authenticated";
GRANT ALL ON TABLE "public"."measures" TO "service_role";

GRANT ALL ON SEQUENCE "public"."measures_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."measures_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."measures_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."routines" TO "anon";
GRANT ALL ON TABLE "public"."routines" TO "authenticated";
GRANT ALL ON TABLE "public"."routines" TO "service_role";

GRANT ALL ON SEQUENCE "public"."routines_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."routines_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."routines_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
